#!/usr/bin/env python
PACKAGE = "bluefox_mono_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

acquisition = gen.add_group("Acquisition")
exposure =  acquisition.add_group("Exposure")
expo_auto_mode = gen.enum([ gen.const("expAutoOff",      str_t, "Off", "AutoExp Off"),
                        gen.const("expAutoContinuous",     str_t, "Continuous", "AutoExp Continuous")],
                     "mvIMPACT::acquire::GenICam::AcquisitionControl -> exposureAuto")
exposure.add("autoExposure",    str_t,    0, "GenICam::AcquisitionControl -> exposureAuto ", "Off", edit_method=expo_auto_mode)
autoParameter = exposure.add_group("AutoExpParameter")
autoParameter.add("autoExpLowerLimit",    int_t,    0, "uS",  10, 10, 1000000)
autoParameter.add("autoExpUpperLimit",    int_t,    0, "uS",  20000, 10, 1000000)

manualParameter = exposure.add_group("ManualParameter")
manualParameter.add("exposureTime",    double_t,    0, "GenICam::AcquisitionControl -> exposureTime ", 3000,  10, 300000)

white_bal_mod = gen.enum([ gen.const("WbAutoOff",      str_t, "Off", "WhiteBalance Off"),
                       gen.const("WbAutoOnce",     str_t, "Once", "WhiteBalance Once"),
                        gen.const("WbAutoContinuous",     str_t, "Continuous", "WhiteBalance Continuous")],
                     "mvIMPACT::acquire::GenICam::AnalogControl -> BalanceWhiteAuto")

acquisition.add("Wb_setting",    str_t,    0, " mvIMPACT::acquire::GenICam::AnalogControl -> BalanceWhiteAuto ", "Once", edit_method=white_bal_mod)


fps_mode = gen.enum([ gen.const("ManualFpsOff",      str_t, "Off", "FpsManual Off"),
                       gen.const("ManualFpsOn",     str_t, "On", "FpsManual On")],
                     "mvIMPACT::acquire::ImageDestination -> mvAcquisitionFrameRateEnable")
acquisition.add("manualFps",    str_t,    0, "GenICam::ImageProcessing -> mvAcquisitionFrameRateEnable ", "Off", edit_method=fps_mode)

acquisition.add("fpsValue",    double_t,    0, "GenICam::AcquisitionControl -> mvAcquisitionFrameRate ", 30,  1, 130)

scaler = gen.add_group("Scaler")

scaler.add("scalerEnable", bool_t, 0, "ScalerMode enable/disable the resize of ImageDestination", False)

settings = scaler.add_group("Settings")
settings.add("scaledWidth", int_t, 0, "Width pixels", 640, 0, 1280)
settings.add("scaledHeight", int_t, 0, "Height pixels", 480, 0, 1024)
settings.add("flip_horizontal",    bool_t,    0, "GenICam::ImageProcessing -> gainOffsetKneeEnable ", False)
settings.add("flip_vertical",    bool_t,    0, "GenICam::ImageProcessing -> gainOffsetKneeEnable ", False)

imageproc = gen.add_group("Imageproc")
imageproc.add("gainKneeEnable",    bool_t,    0, "GenICam::ImageProcessing -> gainOffsetKneeEnable ", False)
imageproc.add("gainPerc",    double_t,    0, "GenICam::AcquisitionControl -> gainOffsetKneeMasterOffset_pc ", 0,  -100, 100)
imageproc.add("blk_level",    double_t,    0, " mvIMPACT::acquire::GenICam::AnalogControl -> blackLevel %", 0,  -24, 24)
lut = imageproc.add_group("LutGamma")
lut_config = gen.enum([ gen.const("LutOff",      str_t, "Off", "Lut Off"),
                       gen.const("LutOn",     str_t, "On", "Lut On")],
                     "mvIMPACT::acquire::ImageProcessing -> LUTEnable")
lut.add("lutGamma",    str_t,    0, "GenICam::ImageProcessing -> LUTEnable ", "Off", edit_method=lut_config)


correction = imageproc.add_group("Corrections")
color_twis_enable = gen.enum([ gen.const("ColorTwisMatOff",      str_t, "Off", "ColorTwisMat Off"),
                       gen.const("ColorTwisMatOn",     str_t, "On", "ColorTwisMat On")],
                     "mvIMPACT::acquire::ImageProcessing -> colorTwistEnable")
correction.add("colorCorrectionsEnable", str_t, 0, "Enable/Disable colorTwistMatrix", "Off", edit_method=color_twis_enable)
correction.add("Saturation",    double_t,    0, "GenICam::ImageProcessing -> setSaturation() ", 100,  0, 200)
correction.add("gammaGain",  double_t,    0, "Set Gamma gain for Lut processing ", 1,  1, 2)



exit(gen.generate(PACKAGE, "bluefox_mono_ros", "DynamicConf"))
